// vite.config.ts
import { defineConfig } from "file:///C:/Users/Dominik/netidee/node_modules/vite/dist/node/index.js";
import react from "file:///C:/Users/Dominik/netidee/node_modules/@vitejs/plugin-react/dist/index.mjs";
import dts from "file:///C:/Users/Dominik/netidee/node_modules/vite-plugin-dts/dist/index.mjs";

// package.json
var peerDependencies = {
  react: "^18.3.1"
};

// vite.config.ts
import tsconfigPaths from "file:///C:/Users/Dominik/netidee/node_modules/vite-tsconfig-paths/dist/index.js";

// vite-auto-props.ts
import { parse } from "file:///C:/Users/Dominik/netidee/node_modules/react-docgen-typescript/lib/index.js";
var docgenOptions = {
  shouldExtractValuesFromUnion: true,
  // shouldExtractLiteralValuesFromEnum: true,
  savePropValueAsString: true
};
function autoProps(options) {
  return {
    name: "auto-props",
    transform(code, id) {
      if (id.endsWith(".tsx") && id.includes("/widgets/")) {
        const parsedInfo = parse(id, docgenOptions);
        const propsInfo = options.getPropsInfo(parsedInfo);
        const tileModification = `
          import { mergeProps } from 'utils/props';
          ${code}
          if (tile) {
            tile.props = mergeProps(tile.props, ${JSON.stringify(propsInfo)});
          }
        `;
        return {
          code: tileModification,
          map: null
          // Vite will generate the sourcemap automatically
        };
      }
    }
  };
}

// src/utils/props.ts
function getPropsInfo(componentInfo) {
  return processComponentInfo(componentInfo[0]);
}
function processComponentInfo(componentInfo) {
  const result = {};
  for (const [key, prop] of Object.entries(componentInfo.props)) {
    let type;
    if (prop.type.raw === "boolean") {
      type = "boolean";
    } else if (prop.type.name === "enum") {
      type = prop.type.value.map((v) => v.value.replace(/"/g, ""));
    } else if (["number", "string", "object", "function"].includes(prop.type.name)) {
      type = prop.type.name;
    } else {
      continue;
    }
    result[key] = {
      description: prop.description || "",
      type,
      required: prop.required || false,
      defaultValue: prop.defaultValue?.value,
      ogInfo: prop
    };
  }
  return result;
}

// vite.config.ts
var vite_config_default = defineConfig({
  plugins: [
    autoProps({ getPropsInfo }),
    react(),
    dts({
      insertTypesEntry: true,
      include: ["src"],
      beforeWriteFile: (filePath, content) => ({
        filePath: filePath.replace("/dist/src/", "/dist/"),
        content
      })
    }),
    tsconfigPaths()
  ],
  build: {
    lib: {
      entry: "./src/index.ts",
      name: "own.tiles",
      fileName: (format) => `index.${format}.js`
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)],
      output: {
        globals: {
          react: "React"
        }
      }
    },
    sourcemap: true,
    emptyOutDir: true
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
